#!/bin/sh
# PX4 commands need the 'px4-' prefix in bash.
# (px4-alias.sh is expected to be in the PATH)
. px4-alias.sh

echo -e "\n*************************"
echo "GPS: $GPS"
echo "RC: $RC"
echo "OSD: $OSD"
echo "EXTRA STEPS:"
for i in "${EXTRA_STEPS[@]}"
do
	echo -e "\t$i"
done
echo -e "*************************\n"

# In order to just exit after starting the uorb / muorb modules define
# the environment variable MINIMAL_PX4. (e.g. export MINIMAL_PX4=1)
# This is useful for testing / debug where you may want to start drivers
# and modules manually from the px4 command shell
if [ ! -z $MINIMAL_PX4 ]; then
    /bin/echo "Running minimal script"
    exit 0
fi

# Figure out what platform we are running on.
PLATFORM=`/usr/bin/voxl-platform 2> /dev/null`
RETURNCODE=$?
if [ $RETURNCODE -ne 0 ]; then
    # If we couldn't get the platform from the voxl-platform utility then check
    # /etc/version to see if there is an M0052 substring in the version string. If so,
    # then we assume that we are on M0052.
    VERSIONSTRING=$(</etc/version)
    M0052SUBSTRING="M0052"
    if [[ "$VERSIONSTRING" == *"$M0052SUBSTRING"* ]]; then
        PLATFORM="M0052"
    fi
fi

# We can only run on M0052, M0054, or M0104 so exit with error if that is not the case
if [ $PLATFORM = "M0052" ]; then
    /bin/echo "Running on M0052"
elif [ $PLATFORM = "M0054" ]; then
    /bin/echo "Running on M0054"
elif [ $PLATFORM = "M0104" ]; then
    /bin/echo "Running on M0104"
else
    /bin/echo "Error, cannot determine platform!"
    exit 0
fi

# Sleep a little here. A lot happens when the uorb and muorb start
# and we need to make sure that it all completes successfully to avoid
# any possible race conditions.
/bin/sleep 1

param select /data/px4/param/hitl_parameters
#param set CBRK_SUPPLY_CHK 894281
#param set COM_DISARM_PRFLT -1
#param set COM_RC_IN_MODE 1
#param set NAV_RCL_ACT 0
#param set EKF2_AID_MASK 1
#param set EKF2_HGT_MODE 0
#param set EKF2_RNG_AID 1

# Load in all of the parameters that have been saved in the file
param load

# Start logging and use timestamps for log files when possible.
# Add the "-e" option to start logging immediately. Default is
# to log only when armed. Caution must be used with the "-e" option
# because if power is removed without stopping the logger gracefully then
# the log file may be corrupted.
logger start -e -t -b 200

/bin/sleep 1

# IMU (accelerometer / gyroscope)
/bin/echo "Starting IMU driver with no rotation"
qshell icm42688p start -s -h

/bin/sleep 1

# Start all of the processing modules on DSP
qshell sensors start -h
qshell ekf2 start
qshell mc_pos_control start
qshell mc_att_control start
qshell mc_rate_control start
qshell mc_hover_thrust_estimator start
qshell mc_autotune_attitude_control start
qshell land_detector start multicopter
qshell manual_control start
qshell control_allocator start
qshell rc_update start
qshell commander start -h
qshell commander mode manual
qshell param_set_selector start

# This is needed for altitude and position hold modes
qshell flight_mode_manager start

/bin/sleep 1

# Start all of the processing modules on the applications processor
dataman start
navigator start

qshell pwm_out_sim start -m hil
qshell dsp_hitl start

# start the onboard fast link to connect to voxl-mavlink-server
mavlink start -x -u 14558 -o 14559 -r 100000 -n lo

# slow down some of the fastest streams
#mavlink stream -u 14556 -s HIGHRES_IMU -r 10
#mavlink stream -u 14556 -s ATTITUDE -r 10
#mavlink stream -u 14556 -s ATTITUDE_QUATERNION -r 10
#mavlink stream -u 14556 -s GLOBAL_POSITION_INT -r 30

# start the slow normal mode for voxl-mavlink-server to forward to GCS
#mavlink start -x -u 14558 -o 14559 -r 100000 -n lo

/bin/sleep 1

mavlink boot_complete

